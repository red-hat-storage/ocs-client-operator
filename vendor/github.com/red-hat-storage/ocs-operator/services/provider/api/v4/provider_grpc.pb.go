// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package providerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OCSProviderClient is the client API for OCSProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OCSProviderClient interface {
	// OnboardConsumer RPC call to validate the consumer and create StorageConsumer
	// resource on the StorageProvider cluster
	OnboardConsumer(ctx context.Context, in *OnboardConsumerRequest, opts ...grpc.CallOption) (*OnboardConsumerResponse, error)
	// GetDesiredClientState RPC call to generate the desired state of the client
	GetDesiredClientState(ctx context.Context, in *GetDesiredClientStateRequest, opts ...grpc.CallOption) (*GetDesiredClientStateResponse, error)
	// OffboardConsumer RPC call to delete StorageConsumer CR on the storage provider cluster.
	OffboardConsumer(ctx context.Context, in *OffboardConsumerRequest, opts ...grpc.CallOption) (*OffboardConsumerResponse, error)
	ReportStatus(ctx context.Context, in *ReportStatusRequest, opts ...grpc.CallOption) (*ReportStatusResponse, error)
	// PeerStorageCluster RPC call to Peer the local Storage Cluster to the remote
	PeerStorageCluster(ctx context.Context, in *PeerStorageClusterRequest, opts ...grpc.CallOption) (*PeerStorageClusterResponse, error)
	RequestMaintenanceMode(ctx context.Context, in *RequestMaintenanceModeRequest, opts ...grpc.CallOption) (*RequestMaintenanceModeResponse, error)
	// GetStorageClientsInfo RPC call to get StorageClientInfo for Peer Storage Client
	GetStorageClientsInfo(ctx context.Context, in *StorageClientsInfoRequest, opts ...grpc.CallOption) (*StorageClientsInfoResponse, error)
	// GetBlockPoolsInfo RPC call to get BlockPoolInfo for Peer Storage Cluster
	GetBlockPoolsInfo(ctx context.Context, in *BlockPoolsInfoRequest, opts ...grpc.CallOption) (*BlockPoolsInfoResponse, error)
}

type oCSProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewOCSProviderClient(cc grpc.ClientConnInterface) OCSProviderClient {
	return &oCSProviderClient{cc}
}

func (c *oCSProviderClient) OnboardConsumer(ctx context.Context, in *OnboardConsumerRequest, opts ...grpc.CallOption) (*OnboardConsumerResponse, error) {
	out := new(OnboardConsumerResponse)
	err := c.cc.Invoke(ctx, "/provider.OCSProvider/OnboardConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCSProviderClient) GetDesiredClientState(ctx context.Context, in *GetDesiredClientStateRequest, opts ...grpc.CallOption) (*GetDesiredClientStateResponse, error) {
	out := new(GetDesiredClientStateResponse)
	err := c.cc.Invoke(ctx, "/provider.OCSProvider/GetDesiredClientState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCSProviderClient) OffboardConsumer(ctx context.Context, in *OffboardConsumerRequest, opts ...grpc.CallOption) (*OffboardConsumerResponse, error) {
	out := new(OffboardConsumerResponse)
	err := c.cc.Invoke(ctx, "/provider.OCSProvider/OffboardConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCSProviderClient) ReportStatus(ctx context.Context, in *ReportStatusRequest, opts ...grpc.CallOption) (*ReportStatusResponse, error) {
	out := new(ReportStatusResponse)
	err := c.cc.Invoke(ctx, "/provider.OCSProvider/ReportStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCSProviderClient) PeerStorageCluster(ctx context.Context, in *PeerStorageClusterRequest, opts ...grpc.CallOption) (*PeerStorageClusterResponse, error) {
	out := new(PeerStorageClusterResponse)
	err := c.cc.Invoke(ctx, "/provider.OCSProvider/PeerStorageCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCSProviderClient) RequestMaintenanceMode(ctx context.Context, in *RequestMaintenanceModeRequest, opts ...grpc.CallOption) (*RequestMaintenanceModeResponse, error) {
	out := new(RequestMaintenanceModeResponse)
	err := c.cc.Invoke(ctx, "/provider.OCSProvider/RequestMaintenanceMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCSProviderClient) GetStorageClientsInfo(ctx context.Context, in *StorageClientsInfoRequest, opts ...grpc.CallOption) (*StorageClientsInfoResponse, error) {
	out := new(StorageClientsInfoResponse)
	err := c.cc.Invoke(ctx, "/provider.OCSProvider/GetStorageClientsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCSProviderClient) GetBlockPoolsInfo(ctx context.Context, in *BlockPoolsInfoRequest, opts ...grpc.CallOption) (*BlockPoolsInfoResponse, error) {
	out := new(BlockPoolsInfoResponse)
	err := c.cc.Invoke(ctx, "/provider.OCSProvider/GetBlockPoolsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OCSProviderServer is the server API for OCSProvider service.
// All implementations must embed UnimplementedOCSProviderServer
// for forward compatibility
type OCSProviderServer interface {
	// OnboardConsumer RPC call to validate the consumer and create StorageConsumer
	// resource on the StorageProvider cluster
	OnboardConsumer(context.Context, *OnboardConsumerRequest) (*OnboardConsumerResponse, error)
	// GetDesiredClientState RPC call to generate the desired state of the client
	GetDesiredClientState(context.Context, *GetDesiredClientStateRequest) (*GetDesiredClientStateResponse, error)
	// OffboardConsumer RPC call to delete StorageConsumer CR on the storage provider cluster.
	OffboardConsumer(context.Context, *OffboardConsumerRequest) (*OffboardConsumerResponse, error)
	ReportStatus(context.Context, *ReportStatusRequest) (*ReportStatusResponse, error)
	// PeerStorageCluster RPC call to Peer the local Storage Cluster to the remote
	PeerStorageCluster(context.Context, *PeerStorageClusterRequest) (*PeerStorageClusterResponse, error)
	RequestMaintenanceMode(context.Context, *RequestMaintenanceModeRequest) (*RequestMaintenanceModeResponse, error)
	// GetStorageClientsInfo RPC call to get StorageClientInfo for Peer Storage Client
	GetStorageClientsInfo(context.Context, *StorageClientsInfoRequest) (*StorageClientsInfoResponse, error)
	// GetBlockPoolsInfo RPC call to get BlockPoolInfo for Peer Storage Cluster
	GetBlockPoolsInfo(context.Context, *BlockPoolsInfoRequest) (*BlockPoolsInfoResponse, error)
	mustEmbedUnimplementedOCSProviderServer()
}

// UnimplementedOCSProviderServer must be embedded to have forward compatible implementations.
type UnimplementedOCSProviderServer struct {
}

func (UnimplementedOCSProviderServer) OnboardConsumer(context.Context, *OnboardConsumerRequest) (*OnboardConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnboardConsumer not implemented")
}
func (UnimplementedOCSProviderServer) GetDesiredClientState(context.Context, *GetDesiredClientStateRequest) (*GetDesiredClientStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesiredClientState not implemented")
}
func (UnimplementedOCSProviderServer) OffboardConsumer(context.Context, *OffboardConsumerRequest) (*OffboardConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OffboardConsumer not implemented")
}
func (UnimplementedOCSProviderServer) ReportStatus(context.Context, *ReportStatusRequest) (*ReportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStatus not implemented")
}
func (UnimplementedOCSProviderServer) PeerStorageCluster(context.Context, *PeerStorageClusterRequest) (*PeerStorageClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerStorageCluster not implemented")
}
func (UnimplementedOCSProviderServer) RequestMaintenanceMode(context.Context, *RequestMaintenanceModeRequest) (*RequestMaintenanceModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMaintenanceMode not implemented")
}
func (UnimplementedOCSProviderServer) GetStorageClientsInfo(context.Context, *StorageClientsInfoRequest) (*StorageClientsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageClientsInfo not implemented")
}
func (UnimplementedOCSProviderServer) GetBlockPoolsInfo(context.Context, *BlockPoolsInfoRequest) (*BlockPoolsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockPoolsInfo not implemented")
}
func (UnimplementedOCSProviderServer) mustEmbedUnimplementedOCSProviderServer() {}

// UnsafeOCSProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OCSProviderServer will
// result in compilation errors.
type UnsafeOCSProviderServer interface {
	mustEmbedUnimplementedOCSProviderServer()
}

func RegisterOCSProviderServer(s grpc.ServiceRegistrar, srv OCSProviderServer) {
	s.RegisterService(&OCSProvider_ServiceDesc, srv)
}

func _OCSProvider_OnboardConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCSProviderServer).OnboardConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.OCSProvider/OnboardConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCSProviderServer).OnboardConsumer(ctx, req.(*OnboardConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCSProvider_GetDesiredClientState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDesiredClientStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCSProviderServer).GetDesiredClientState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.OCSProvider/GetDesiredClientState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCSProviderServer).GetDesiredClientState(ctx, req.(*GetDesiredClientStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCSProvider_OffboardConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OffboardConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCSProviderServer).OffboardConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.OCSProvider/OffboardConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCSProviderServer).OffboardConsumer(ctx, req.(*OffboardConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCSProvider_ReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCSProviderServer).ReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.OCSProvider/ReportStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCSProviderServer).ReportStatus(ctx, req.(*ReportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCSProvider_PeerStorageCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerStorageClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCSProviderServer).PeerStorageCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.OCSProvider/PeerStorageCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCSProviderServer).PeerStorageCluster(ctx, req.(*PeerStorageClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCSProvider_RequestMaintenanceMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMaintenanceModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCSProviderServer).RequestMaintenanceMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.OCSProvider/RequestMaintenanceMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCSProviderServer).RequestMaintenanceMode(ctx, req.(*RequestMaintenanceModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCSProvider_GetStorageClientsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageClientsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCSProviderServer).GetStorageClientsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.OCSProvider/GetStorageClientsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCSProviderServer).GetStorageClientsInfo(ctx, req.(*StorageClientsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCSProvider_GetBlockPoolsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockPoolsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCSProviderServer).GetBlockPoolsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.OCSProvider/GetBlockPoolsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCSProviderServer).GetBlockPoolsInfo(ctx, req.(*BlockPoolsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OCSProvider_ServiceDesc is the grpc.ServiceDesc for OCSProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OCSProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provider.OCSProvider",
	HandlerType: (*OCSProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnboardConsumer",
			Handler:    _OCSProvider_OnboardConsumer_Handler,
		},
		{
			MethodName: "GetDesiredClientState",
			Handler:    _OCSProvider_GetDesiredClientState_Handler,
		},
		{
			MethodName: "OffboardConsumer",
			Handler:    _OCSProvider_OffboardConsumer_Handler,
		},
		{
			MethodName: "ReportStatus",
			Handler:    _OCSProvider_ReportStatus_Handler,
		},
		{
			MethodName: "PeerStorageCluster",
			Handler:    _OCSProvider_PeerStorageCluster_Handler,
		},
		{
			MethodName: "RequestMaintenanceMode",
			Handler:    _OCSProvider_RequestMaintenanceMode_Handler,
		},
		{
			MethodName: "GetStorageClientsInfo",
			Handler:    _OCSProvider_GetStorageClientsInfo_Handler,
		},
		{
			MethodName: "GetBlockPoolsInfo",
			Handler:    _OCSProvider_GetBlockPoolsInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provider.proto",
}
